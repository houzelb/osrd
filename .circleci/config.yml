version: 2.1

parameters:
  rust-version:
    type: string
    default: "1.82"
  node-version:
    type: string
    default: "20.5"
  java-version:
    type: string
    default: "17.0"
  python-version:
    type: string
    default: "3.12"

orbs:
  docker: circleci/docker@2.4.0

executors:
  python:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
  rust:
    docker:
      - image: cimg/rust:<< pipeline.parameters.rust-version >>
  node:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
  java:
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-version >>

jobs:
  check-core:
    executor: java
    steps:
      - checkout
      - run:
          name: Calculate source checksum
          command: |
            # Create checksum of the entire editoast directory
            find editoast -type f -exec sha256sum {} \; | sort > /tmp/src_checksum
      - restore_cache:
          keys:
            - tests-core-{{ checksum "/tmp/src_checksum" }}
      - restore_cache:
          keys:
            - gradle-core-{{ checksum "core/build.gradle" }}
      - run:
          name: Run Core Tests
          command: |
            if [ ! -f "/tmp/tests_passed" ]; then
              cd core
              ./gradlew check
              touch /tmp/tests_passed
            else
              echo "Tests already passed for this source code version, skipping..."
            fi
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-core-{{ checksum "core/build.gradle" }}
      - save_cache:
          paths:
            - /tmp/tests_passed
          key: tests-core-{{ checksum "/tmp/src_checksum" }}

  check-editoast:
    docker:
      - image: cimg/rust:<< pipeline.parameters.rust-version >>
      - image: cimg/postgres:17.0-postgis
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
      - image: cimg/redis:7.2.4 # Exact version used by the valkey fork, should be compatible.
    steps:
      - checkout
      - run:
          name: Calculate source checksum
          command: |
            # Create checksum of the entire editoast directory
            find editoast -type f -exec sha256sum {} \; | sort > /tmp/src_checksum
      - restore_cache:
          keys:
            - tests-editoast-{{ checksum "/tmp/src_checksum" }}
      - restore_cache:
          keys:
            - cargo-editoast-{{ checksum "editoast/Cargo.lock" }}
      - run:
          name: Setup Database
          command: |
            psql postgresql://postgres:password@localhost -f docker/init_db.sql
      - run:
          name: Run Editoast Tests
          working_directory: editoast
          environment:
            DATABASE_URL: postgres://osrd:password@localhost/osrd
            CI: "true"
          command: |
            if [ ! -f "/tmp/tests_passed" ]; then
              sudo apt-get update
              sudo apt-get install -y libgeos-dev libpq-dev
              cargo install diesel_cli --no-default-features --features postgres
              diesel migration run --locked-schema
              cargo test --workspace --verbose
              touch /tmp/tests_passed
            else
              echo "Tests already passed for this source code version, skipping..."
            fi
      - save_cache:
          paths:
            - ~/.cargo
            - editoast/target
          key: cargo-editoast-{{ checksum "editoast/Cargo.lock" }}
      - save_cache:
          paths:
            - /tmp/tests_passed
          key: tests-editoast-{{ checksum "/tmp/src_checksum" }}

  check-gateway:
    executor: rust
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-gateway-{{ checksum "gateway/Cargo.lock" }}
      - run:
          name: Run Gateway Tests
          working_directory: gateway
          command: |
            cargo test --verbose
      - run:
          name: Check Gateway Format
          working_directory: gateway
          command: |
            cargo fmt --check
      - run:
          name: Run Gateway Clippy
          working_directory: gateway
          command: |
            cargo clippy --all-features --all-targets -- -D warnings
      - save_cache:
          paths:
            - ~/.cargo
            - gateway/target
          key: cargo-gateway-{{ checksum "gateway/Cargo.lock" }}

  check-osrdyne:
    executor: rust
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-osrdyne-{{ checksum "osrdyne/Cargo.lock" }}
      - run:
          name: Run OSRDyne Tests
          working_directory: osrdyne
          command: |
            cargo test --verbose
      - run:
          name: Check OSRDyne Format
          working_directory: osrdyne
          command: |
            cargo fmt --check
      - run:
          name: Run OSRDyne Clippy
          working_directory: osrdyne
          command: |
            cargo clippy --all-features --all-targets -- -D warnings
      - save_cache:
          paths:
            - ~/.cargo
            - osrdyne/target
          key: cargo-osrdyne-{{ checksum "osrdyne/Cargo.lock" }}

  check-front:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-{{ checksum "front/package-lock.json" }}
      - run:
          name: Install Dependencies
          working_directory: front
          command: npm ci
      - run:
          name: Check Code Formatting
          working_directory: front
          command: npx prettier . --check
      - run:
          name: Check i18n Keys
          working_directory: front
          command: npm run i18n-checker
      - run:
          name: Run Tests
          working_directory: front
          command: npm run test
      - save_cache:
          paths:
            - front/node_modules
          key: npm-{{ checksum "front/package-lock.json" }}

  docker-bake:
    executor: docker/default
    steps:
      - checkout
      - run:
          name: Prepare Docker processed bakefile
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
            docker buildx bake --file docker/docker-bake.hcl --print | tee bakefile.json
            ./.circleci/scripts/add-tags.sh bakefile.json
            docker buildx bake --file bakefile.json

workflows:
  version: 2
  tests:
    jobs:
      - check-core
      - check-editoast
      - check-gateway
      - check-osrdyne
      - check-front
      - docker-bake:
          requires:
            - check-core
            - check-editoast
            - check-gateway
            - check-osrdyne
            - check-front
